<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hack.io.BCSV</name>
    </assembly>
    <members>
        <member name="T:Hack.io.BCSV.BCSV">
            <summary>
            Binary Comma Separated Values<para/>
            Represents a table like structure used in J3D Games
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Fields">
            <summary>
            The Dictionary containing all the fields in this BCSV
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Entries">
            <summary>
            The list of Entries in this BCSV
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Encoding">
            <summary>
            The encoding to use while handling text. Should only realistically be Shift-JIS or UTF-8
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.OnSaveFieldCalculator">
            <summary>
            The field data calculator to use on saving
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.FieldCount">
            <summary>
            The number of fields in this BCSV
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.EntryCount">
            <summary>
            The number of entries in this BCSV
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Item(System.Int32)">
            <summary>
            Gets or sets the BCSV.Entry at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Item(System.UInt32)">
            <summary>
            Gets or sets the value associated with the specified hash.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.#ctor">
            <summary>
            Creates an empty BCSV
            </summary>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Add(Hack.io.BCSV.BCSV.Entry)">
            <summary>
            Adds a new Entry to the BCSV.<para/>IMPORTANT: The input entry will have it's fields edited to match the field definition of this BCSV.
            </summary>
            <param name="NewElement">The new entry to add</param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Add(Hack.io.BCSV.BCSV.Field)">
            <summary>
            Adds a new Field to the BCSV.<para/>IMPORTANT: This will update all BCSV entries to have the missing field data. Default values will be used.
            </summary>
            <param name="NewElement">The new field to add</param>
            <exception cref="T:System.Data.DuplicateNameException">Thrown if the field already exists in the BCSV</exception>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Add(Hack.io.BCSV.BCSV.Entry[])">
            <inheritdoc cref="M:Hack.io.BCSV.BCSV.AddRange(System.Collections.Generic.IReadOnlyList{Hack.io.BCSV.BCSV.Entry})"/>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Add(Hack.io.BCSV.BCSV.Field[])">
            <inheritdoc cref="M:Hack.io.BCSV.BCSV.AddRange(System.Collections.Generic.IReadOnlyList{Hack.io.BCSV.BCSV.Field})"/>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.AddRange(System.Collections.Generic.IReadOnlyList{Hack.io.BCSV.BCSV.Entry})">
            <summary>
            Add multiple entries at once to the BCSV
            </summary>
            <param name="NewElements">Collection of entries to add</param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.AddRange(System.Collections.Generic.IReadOnlyList{Hack.io.BCSV.BCSV.Field})">
            <summary>
            Add multiple fields at once to the BCSV
            </summary>
            <param name="NewElements">Collection of fields to add</param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Insert(System.Int32,Hack.io.BCSV.BCSV.Entry)">
            <summary>
            Insert an Entry at the specified index
            </summary>
            <param name="Index">The index to insert at</param>
            <param name="NewElement">The Entry to insert</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.InsertRange(System.Int32,System.Collections.Generic.IReadOnlyList{Hack.io.BCSV.BCSV.Entry})">
            <summary>
            Insert multiple Entry objects at once to the BCSV at the specified index
            </summary>
            <param name="Index">The index to insert at</param>
            <param name="NewElements">The entries to insert</param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Remove(Hack.io.BCSV.BCSV.Entry)">
            <summary>
            Removes a specific Entry
            </summary>
            <param name="Target">The entry to remove</param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.RemoveAll(System.Predicate{Hack.io.BCSV.BCSV.Entry})">
            <summary>
            Removes all entries that match the <see cref="T:System.Predicate`1"/>
            </summary>
            <param name="match">The conditions to remove</param>
            <returns>the number of removed entries</returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.RemoveAt(System.Int32)">
            <summary>
            Remove the Entry at the given index
            </summary>
            <param name="Index">index to remove at</param>
            <exception cref="T:System.IndexOutOfRangeException">The index is outside the bounds of the array</exception>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove several Entry objects at once
            </summary>
            <param name="Index">The zero-based starting index of the range of entries to remove.</param>
            <param name="Count">The number of entries to remove.</param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Reverse">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Reverse"/>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Reverse(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Clear(System.Boolean,System.Boolean)">
            <summary>
            Empty some data. Can empty the Entries or Fields. Or Both.<para/>By default, this only clears out the Entries
            </summary>
            <param name="ClearEntries">Clear the entry list?</param>
            <param name="ClearFields">Clear the field dictionary?<para/>Note that clearing the fields will also clear the data inside the entries, but not change the number of entries</param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Sort(System.Comparison{Hack.io.BCSV.BCSV.Entry})">
            <summary>
            Sort the entries by a given function
            </summary>
            <param name="Comparison"></param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.ContainsField(System.UInt32)">
            <summary>
            Determines if this BCSV contains a field with the given Hash
            </summary>
            <param name="hash">The hash to look for</param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.SetAllRecalculate(System.Boolean)">
            <summary>
            Sets all fields to be recalculated. See <see cref="P:Hack.io.BCSV.BCSV.Field.AutoRecalc"/>.
            </summary>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Load(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Save(System.IO.Stream)">
            <inheritdoc/>
            <exception cref="T:System.IO.InternalBufferOverflowException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.CreateEntry">
            <summary>
            Override this if you need to have it load a different class instead of BCSV.Entry
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hack.io.BCSV.BCSV.Field">
            <summary>
            A BCSV Field. Use one to define how Data in BCSVEntry objects is managed while saving
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Field.HashName">
            <summary>
            The numerical hash representation of the field name.
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Field.DataType">
            <summary>
            The type of data being held inside this field
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Field.Bitmask">
            <summary>
            The number that determines how the value is read from the file.<para/>
            Can be manually calculated, but if you choose to do that, you should manually calculate the Bitmask, ShiftAmount, and EntryOffset for all fields in the BCSV
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Field.ShiftAmount">
            <summary>
            The number of bits to shift while reading the value from the file.<para/>
            Can be manually calculated, but if you choose to do that, you should manually calculate the Bitmask, ShiftAmount, and EntryOffset for all fields in the BCSV
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Field.EntryOffset">
            <summary>
            The offset within the binary entry that this field is located at.<para/>
            Can be manually calculated, but if you choose to do that, you should manually calculate the Bitmask, ShiftAmount, and EntryOffset for all fields in the BCSV
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Field.AutoRecalc">
            <summary>
            Setting this to true will auto-recalculate the Bitmask and Shift Amount on save
            </summary>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Field.GetDefaultValue">
            <summary>
            Gets the default value for this BCSVField's DataType
            </summary>
            <returns>The default value for this field's DataType</returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Field.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Field.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Field.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Hack.io.BCSV.BCSV.Entry">
            <summary>
            A BCSV Entry. Use one of these to store data as defined by the BCSV Fields
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Entry.Data">
            <summary>
            The Data held in this BCSVEntry. The Key is the Hash that the Data Value belongs to
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Entry.Encoding">
            <summary>
            The encoding to use while handling text. Should only realistically be <see cref="P:Hack.io.Utility.StreamUtil.ShiftJIS"/> or <see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="P:Hack.io.BCSV.BCSV.Entry.Item(Hack.io.BCSV.BCSV.Field)">
            <summary>
            Access the data inside this BCSV Entry
            </summary>
            <param name="field">The field to get from the entry</param>
            <returns>the data for the requested field in this entry</returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Entry.CopyTo(Hack.io.BCSV.BCSV.Entry)">
            <summary>
            Copies the data from this Entry to another Entry
            </summary>
            <param name="Target">The entry to copy the data onto</param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Entry.FromClipboard(System.String,System.String)">
            <summary>
            Attempt to load data from a Clipboard string
            </summary>
            <param name="input">The Clipboard input string</param>
            <param name="Head">The head to try and paste with (for validation purposes)</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Entry.ToClipboard(System.String)">
            <summary>
            Create a BCSV string that can be copied to the clipboard
            </summary>
            <param name="Head">The head to use in the copy (for validation purposes)</param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Entry.Add(System.UInt32,System.Object)">
            <summary>
            Adds the value into the BCSV entry
            </summary>
            <param name="Hash"></param>
            <param name="value"></param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Entry.TryAdd(System.UInt32,System.Object)">
            <summary>
            Tries to add the value into the BCSV Entry
            </summary>
            <param name="Hash"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Entry.Contains(System.UInt32)">
            <summary>
            Checks to see if this BCSV Entry contains data for the given hash
            </summary>
            <param name="Hash">the hash to look for</param>
            <returns>TRUE if the data exists, FALSE otherwise</returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Entry.Remove(System.UInt32)">
            <summary>
            Removes the data for the given hash
            </summary>
            <param name="Hash"></param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Entry.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.Entry.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Hack.io.BCSV.BCSV.DataTypes">
            <summary>
            BCSV.Field Data Types
            </summary>
        </member>
        <member name="F:Hack.io.BCSV.BCSV.DataTypes.INT32">
            <summary>
            32 bit integer (4 Bytes)
            </summary>
        </member>
        <member name="F:Hack.io.BCSV.BCSV.DataTypes.CHARARRAY">
            <summary>
            A 32 byte array of characters. (32 bytes)<para/>Like a string, but limited to 32 bytes. <see cref="T:System.Byte"/>[] and <see cref="T:System.String"/> are accepted here
            </summary>
        </member>
        <member name="F:Hack.io.BCSV.BCSV.DataTypes.FLOAT">
            <summary>
            32 bit decimal value (4 Bytes)
            </summary>
        </member>
        <member name="F:Hack.io.BCSV.BCSV.DataTypes.UINT32">
            <summary>
            Unsigned 32 bit integer (4 Bytes)<para/>It's worth noting that most games do not actually use this to tell the difference between UInt and Int
            </summary>
        </member>
        <member name="F:Hack.io.BCSV.BCSV.DataTypes.INT16">
            <summary>
            16 bit integer (2 Bytes)
            </summary>
        </member>
        <member name="F:Hack.io.BCSV.BCSV.DataTypes.BYTE">
            <summary>
            8 bit integer (1 Byte)
            </summary>
        </member>
        <member name="F:Hack.io.BCSV.BCSV.DataTypes.STRING">
            <summary>
            A set of characters (4 Bytes, characters added to the String table)
            </summary>
        </member>
        <member name="F:Hack.io.BCSV.BCSV.DataTypes.NULL">
            <summary>
            Refers to NULL.<para/>DO NOT USE as it cannot be written to a file.
            </summary>
        </member>
        <member name="T:Hack.io.BCSV.BCSV.BCSVHashFunction">
            <summary>
            Represents a function that can be used to hash a string for BCSV purposes
            </summary>
            <param name="Str">The characters to hash</param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.StringToHash_Old(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts a stringn to an Old Hash. Used in older Jsys games (Luigi's Mansion)
            </summary>
            <param name="Str">the string to convert</param>
            <returns>the hashed of the string</returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.StringToHash_JGadget(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts a stringn to a JGadget Hash. Used in newer Jsys games (SMG, SMG2, DKJB)
            </summary>
            <param name="Str">the string to convert</param>
            <returns>the hashed of the string</returns>
        </member>
        <member name="T:Hack.io.BCSV.BCSV.FieldDataCalculator">
            <summary>
            Represents a function that can be used to calculate field data before saving.<para/>
            Be aware that these will edit the BCSV field data.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.CalculateFieldDataDefault(Hack.io.BCSV.BCSV@)">
            <summary>
            The function used to organize the fields
            </summary>
            <param name="target">the target BCSV</param>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.GetDefaultValue(Hack.io.BCSV.BCSV.DataTypes)">
            <summary>
            Gets the default value of the given DataType
            </summary>
            <param name="type">the DataTypes to get the default for</param>
            <returns>The default value of the DataType</returns>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.GetDefaultBitmask(Hack.io.BCSV.BCSV.DataTypes)">
            <summary>
            Gets the default value for the bitmask of the given Data Type
            </summary>
            <param name="type">the DataTypes to get the default for</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.GetDataTypeSize(Hack.io.BCSV.BCSV.DataTypes)">
            <summary>
            Gets the byte size of the given data type
            </summary>
            <param name="type">The type to get the size of</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:Hack.io.BCSV.BCSV.JGadgetFieldSort(Hack.io.BCSV.BCSV.Field,Hack.io.BCSV.BCSV.Field)">
            <summary>
            Determines the order of fields based on official format specs.<para/>This is a <see cref="T:System.Comparison`1"/>
            </summary>
            <param name="L"></param>
            <param name="R"></param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
    </members>
</doc>
